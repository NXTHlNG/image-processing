# Эталонные значения для различных источников освещения и углов наблюдения
from colors.cie_lab import CieLab


reference_values = {
    "A": {
        "2°": {"X": 109.850, "Y": 100.000, "Z": 35.585},
        "10°": {"X": 111.144, "Y": 100.000, "Z": 35.200},
    },
    "B": {
        "2°": {"X": 99.0927, "Y": 100.000, "Z": 85.313},
        "10°": {"X": 99.178, "Y": 100.000, "Z": 84.3493},
    },
    "C": {
        "2°": {"X": 98.074, "Y": 100.000, "Z": 118.232},
        "10°": {"X": 97.285, "Y": 100.000, "Z": 116.145},
    },
    "D50": {
        "2°": {"X": 96.422, "Y": 100.000, "Z": 82.521},
        "10°": {"X": 96.720, "Y": 100.000, "Z": 81.427},
    },
    "D55": {
        "2°": {"X": 95.682, "Y": 100.000, "Z": 92.149},
        "10°": {"X": 95.799, "Y": 100.000, "Z": 90.926},
    },
    "D65": {
        "2°": {"X": 95.047, "Y": 100.000, "Z": 108.883},
        "10°": {"X": 94.811, "Y": 100.000, "Z": 107.304},
    },
    "D75": {
        "2°": {"X": 94.972, "Y": 100.000, "Z": 122.638},
        "10°": {"X": 94.416, "Y": 100.000, "Z": 120.641},
    },
    "E": {
        "2°": {"X": 100.000, "Y": 100.000, "Z": 100.000},
        "10°": {"X": 100.000, "Y": 100.000, "Z": 100.000},
    },
    "F1": {
        "2°": {"X": 92.834, "Y": 100.000, "Z": 103.665},
        "10°": {"X": 94.791, "Y": 100.000, "Z": 103.191},
    },
    "F2": {
        "2°": {"X": 99.187, "Y": 100.000, "Z": 67.395},
        "10°": {"X": 103.280, "Y": 100.000, "Z": 69.026},
    },
    "F3": {
        "2°": {"X": 103.754, "Y": 100.000, "Z": 49.861},
        "10°": {"X": 108.968, "Y": 100.000, "Z": 51.965},
    },
    "F4": {
        "2°": {"X": 109.147, "Y": 100.000, "Z": 38.813},
        "10°": {"X": 114.961, "Y": 100.000, "Z": 40.963},
    },
    "F5": {
        "2°": {"X": 90.872, "Y": 100.000, "Z": 98.723},
        "10°": {"X": 93.369, "Y": 100.000, "Z": 98.636},
    },
    "F6": {
        "2°": {"X": 97.309, "Y": 100.000, "Z": 60.191},
        "10°": {"X": 102.148, "Y": 100.000, "Z": 62.074},
    },
    "F7": {
        "2°": {"X": 95.044, "Y": 100.000, "Z": 108.755},
        "10°": {"X": 95.792, "Y": 100.000, "Z": 107.687},
    },
    "F8": {
        "2°": {"X": 96.413, "Y": 100.000, "Z": 82.333},
        "10°": {"X": 97.115, "Y": 100.000, "Z": 81.135},
    },
    "F9": {
        "2°": {"X": 100.365, "Y": 100.000, "Z": 67.868},
        "10°": {"X": 102.116, "Y": 100.000, "Z": 67.826},
    },
    "F10": {
        "2°": {"X": 96.174, "Y": 100.000, "Z": 81.712},
        "10°": {"X": 99.001, "Y": 100.000, "Z": 83.134},
    },
    "F11": {
        "2°": {"X": 100.966, "Y": 100.000, "Z": 64.370},
        "10°": {"X": 103.866, "Y": 100.000, "Z": 65.627},
    },
    "F12": {
        "2°": {"X": 108.046, "Y": 100.000, "Z": 39.228},
        "10°": {"X": 111.428, "Y": 100.000, "Z": 40.353},
    },
}

class XYZ:
    def __init__(self, X, Y, Z):
        """
        Инициализация класса XYZ
        """
        self.X = X
        self.Y = Y
        self.Z = Z

    def __str__(self):
        return f"XYZ(X={self.X}, Y={self.Y}, Z={self.Z})"
    
    def to_cie_lab(self, Reference_X, Reference_Y, Reference_Z):
        # Нормализация значений XYZ
        var_X = self.X / Reference_X
        var_Y = self.Y / Reference_Y
        var_Z = self.Z / Reference_Z

        # Применение нелинейного преобразования
        def f(t):
            if t > 0.008856:
                return t ** (1 / 3)
            else:
                return (7.787 * t) + (16 / 116)

        var_X = f(var_X)
        var_Y = f(var_Y)
        var_Z = f(var_Z)

        # Вычисление значений CIELAB
        CIE_L = (116 * var_Y) - 16
        CIE_a = 500 * (var_X - var_Y)
        CIE_b = 200 * (var_Y - var_Z)

        return CieLab(CIE_L, CIE_a, CIE_b)
    
    def to_hunter_lab(self, Reference_X, Reference_Y, Reference_Z):
        var_Ka = (175.0 / 198.04) * (Reference_Y + Reference_X)
        var_Kb = (70.0 / 218.11) * (Reference_Y + Reference_Z)

        Hunter_L = 100.0 * (self.Y / Reference_Y) ** 0.5
        Hunter_a = var_Ka * (((self.X / Reference_X) - (self.Y / Reference_Y)) / (self.Y / Reference_Y) ** 0.5)
        Hunter_b = var_Kb * (((self.Y / Reference_Y) - (self.Z / Reference_Z)) / (self.Y / Reference_Y) ** 0.5)

        return Hunter_L, Hunter_a, Hunter_b